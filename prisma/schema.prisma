// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Affiliate {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  clicks    Click[]

  @@map("affiliates")
}

model Campaign {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  clicks    Click[]

  @@map("campaigns")
}

model Click {
  id          String      @id @default(uuid()) @db.Uuid
  affiliateId String      @map("affiliate_id") @db.Uuid
  campaignId  String      @map("campaign_id") @db.Uuid
  clickId     String      @unique @map("click_id") @db.VarChar(255)
  ipAddress   String?     @map("ip_address") @db.Inet
  userAgent   String?     @map("user_agent") @db.Text
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  affiliate   Affiliate   @relation(fields: [affiliateId], references: [id])
  campaign    Campaign    @relation(fields: [campaignId], references: [id])
  conversions Conversion[]

  // Indexes
  @@index([affiliateId])
  @@index([campaignId])
  @@index([clickId])
  @@map("clicks")
}

model Conversion {
  id        String   @id @default(uuid()) @db.Uuid
  clickId   String   @map("click_id") @db.VarChar(255)
  amount    Decimal? @db.Decimal(10, 2)
  currency  String   @default("USD") @db.VarChar(3)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  click     Click    @relation(fields: [clickId], references: [clickId])

  // Indexes
  @@index([clickId])
  @@map("conversions")
}
